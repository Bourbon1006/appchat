package com.example.appchat

import android.app.AlertDialog
import android.content.Intent
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.view.inputmethod.EditorInfo
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.appchat.adapter.MessageAdapter
import com.example.appchat.adapter.UserAdapter
import com.example.appchat.adapter.ContactAdapter
import com.example.appchat.adapter.SearchUserAdapter
import com.example.appchat.adapter.ContactSelectionAdapter
import com.example.appchat.adapter.GroupAdapter
import com.example.appchat.adapter.GroupMemberAdapter
import com.example.appchat.api.ApiClient
import com.example.appchat.api.LocalDateTimeAdapter
import com.example.appchat.model.ChatMessage
import com.example.appchat.model.MessageType
import com.example.appchat.model.User
import com.example.appchat.util.UserPreferences
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.TypeAdapter
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import okhttp3.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.util.concurrent.TimeUnit
import java.time.LocalDateTime
import com.google.android.material.bottomnavigation.BottomNavigationView
import com.example.appchat.model.FriendRequest
import com.example.appchat.model.WebSocketMessage
import com.example.appchat.model.Group
import com.example.appchat.model.CreateGroupRequest
import android.net.Uri
import android.provider.MediaStore
import android.app.Activity
import okhttp3.MultipartBody
import okhttp3.RequestBody
import com.example.appchat.model.FileDTO
import android.Manifest
import android.content.pm.PackageManager
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import android.content.ContentResolver
import android.provider.OpenableColumns
import java.io.File
import java.io.InputStream
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.RequestBody.Companion.asRequestBody
import android.os.Build
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.result.ActivityResultLauncher
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch
import com.example.appchat.adapter.SearchResultAdapter
import com.bumptech.glide.Glide
import com.bumptech.glide.request.RequestOptions
import com.example.appchat.model.UpdateUserRequest
import com.example.appchat.model.UserDTO
import android.os.Handler
import android.os.Looper
import com.bumptech.glide.load.engine.DiskCacheStrategy
import android.content.BroadcastReceiver
import android.content.Context
import android.content.IntentFilter
import android.content.Context.RECEIVER_NOT_EXPORTED
import android.widget.*
import com.example.appchat.fragment.ContactsFragment
import com.example.appchat.websocket.WebSocketManager

class MainActivity : AppCompatActivity() {
    private lateinit var webSocket: WebSocket
    private lateinit var messageInput: EditText
    private lateinit var sendButton: Button
    private lateinit var messageList: RecyclerView
    private lateinit var messageAdapter: MessageAdapter
    private lateinit var toolbar: Toolbar
    private var userId: Long = -1L  // Ê∑ªÂä†userId‰Ωú‰∏∫Á±ªÊàêÂëòÂèòÈáè
    private val gson = GsonBuilder()
        .registerTypeAdapter(LocalDateTime::class.java, LocalDateTimeAdapter())
        .registerTypeAdapter(MessageType::class.java, object : TypeAdapter<MessageType>() {
            override fun write(out: JsonWriter, value: MessageType?) {
                out.value(value?.name)
            }

            override fun read(input: JsonReader): MessageType {
                return MessageType.valueOf(input.nextString())
            }
        })
        .create()
    private var currentChatUserId: Long? = null
    private var currentUserAdapter: UserAdapter? = null
    private var contactAdapter: ContactAdapter? = null
    private var currentChatGroupId: Long? = null
    private val FILE_PICK_REQUEST = 1
    private val STORAGE_PERMISSION_REQUEST = 2
    private val apiService = ApiClient.apiService
    private var isMultiSelectMode = false
    private val selectedMessages = mutableSetOf<Long>()
    private lateinit var deleteButton: ImageButton
    private var deleteCallback: (() -> Unit)? = null

    private val filePickerLauncher = registerForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        uri?.let { uploadFile(it) }
    }

    private val requestPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        if (permissions.all { it.value }) {
            println("All permissions granted")
            showFileChooser()
        } else {
            println("Some permissions denied")
            Toast.makeText(this, "ÈúÄË¶ÅÂ≠òÂÇ®ÊùÉÈôêÊâçËÉΩÈÄâÊã©Êñá‰ª∂", Toast.LENGTH_SHORT).show()
        }
    }

    private val avatarPickerLauncher = registerForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        uri?.let { uploadAvatar(it) }
    }

    private val avatarRefreshReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            if (intent.action == "com.example.appchat.REFRESH_AVATAR") {
                // Âà∑Êñ∞Â§¥ÂÉè
                val toolbarAvatar = findViewById<ImageView>(R.id.toolbarAvatar)
                val userId = UserPreferences.getUserId(this@MainActivity)
                val avatarUrl = "${getString(R.string.server_url_format).format(
                    getString(R.string.server_ip),
                    getString(R.string.server_port)
                )}/api/users/$userId/avatar?t=${System.currentTimeMillis()}"

                Glide.with(this@MainActivity)
                    .load(avatarUrl)
                    .apply(RequestOptions.circleCropTransform())
                    .skipMemoryCache(true)
                    .diskCacheStrategy(DiskCacheStrategy.NONE)
                    .placeholder(R.drawable.default_avatar)
                    .error(R.drawable.default_avatar)
                    .into(toolbarAvatar)
            }
        }
    }

    private fun WebSocket.sendDebug(message: Any) {
        val json = gson.toJson(message)
        println("Sending: $json")
        this.send(json)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // ÂàùÂßãÂåñuserId
        userId = UserPreferences.getUserId(this)

        // ÂàùÂßãÂåñÂ∑•ÂÖ∑Ê†èÁõ∏ÂÖ≥ËßÜÂõæ
        deleteButton = findViewById(R.id.deleteButton)
        deleteButton.visibility = View.GONE  // ÈªòËÆ§ÈöêËóè

        // ËÆæÁΩÆ Toolbar
        val toolbar = findViewById<Toolbar>(R.id.toolbar)
        setSupportActionBar(toolbar)
        supportActionBar?.apply {
            setDisplayShowTitleEnabled(true)
            title = "ËÅäÂ§©"
        }

        // Âä†ËΩΩÂ§¥ÂÉè
        val toolbarAvatar = findViewById<ImageView>(R.id.toolbarAvatar)
        val avatarUrl = "${getString(R.string.server_url_format).format(
            getString(R.string.server_ip),
            getString(R.string.server_port)
        )}/api/users/$userId/avatar?t=${System.currentTimeMillis()}"
        
        Glide.with(this)
            .load(avatarUrl)
            .apply(RequestOptions.circleCropTransform())
            .skipMemoryCache(true)
            .diskCacheStrategy(DiskCacheStrategy.NONE)
            .placeholder(R.drawable.default_avatar)
            .error(R.drawable.default_avatar)
            .into(toolbarAvatar)

        // ÁÇπÂáªÂ§¥ÂÉèË∑≥ËΩ¨Âà∞‰∏™‰∫∫ËµÑÊñôÈ°µÈù¢
        toolbarAvatar.setOnClickListener {
            startActivity(Intent(this, ProfileActivity::class.java))
        }

        val bottomNavigation = findViewById<BottomNavigationView>(R.id.bottomNavigation)
        bottomNavigation.setOnItemSelectedListener { item ->
            when (item.itemId) {
                R.id.nav_group -> {
                    supportActionBar?.title = "Áæ§ËÅä"
                    showGroupListDialog()
                    true
                }
                R.id.nav_contacts -> {
                    supportActionBar?.title = "ËÅîÁ≥ª‰∫∫"
                    val fragment = ContactsFragment()
                    supportFragmentManager.beginTransaction()
                        .replace(R.id.fragmentContainer, fragment)
                        .commit()
                    true
                }
                R.id.nav_profile -> {
                    showProfileDialog()
                    true
                }
                else -> false
            }
        }
        
        setupViews()
        
        // ÂàùÂßãÂåñWebSocketËøûÊé•
        val serverUrl = "ws://${getString(R.string.server_ip)}:${getString(R.string.server_port)}/chat"
        WebSocketManager.init(serverUrl, userId)

        messageAdapter = MessageAdapter(
            context = this,
            currentUserId = userId,
            currentChatType = "group",  // ÈªòËÆ§‰∏∫Áæ§ËÅä
            chatPartnerId = -1L,  // ÈªòËÆ§ÂÄºÔºåË°®Á§∫Ê≤°ÊúâÁâπÂÆöËÅäÂ§©ÂØπË±°
            onMessageDelete = { messageId ->
                lifecycleScope.launch {
                    try {
                        println("üóëÔ∏è Starting message deletion process: $messageId")
                        
                        // ÂÖà‰ªéÊú¨Âú∞Âà†Èô§
                        messageAdapter.removeMessage(messageId)
                        println("‚úÖ Local message deletion completed")
                        
                        // ÁÑ∂Âêé‰ªéÊúçÂä°Âô®Âà†Èô§
                        val response = apiService.deleteMessage(messageId, userId)
                        if (response.isSuccessful) {
                            println("‚úÖ Server message deletion successful")
                            Toast.makeText(this@MainActivity, "Ê∂àÊÅØÂ∑≤Âà†Èô§", Toast.LENGTH_SHORT).show()
                        } else {
                            println("‚ö†Ô∏è Server deletion failed but local deletion succeeded: ${response.code()}")
                        }
                    } catch (e: Exception) {
                        e.printStackTrace()
                        println("‚ùå Error in deletion process: ${e.message}")
                    }
                }
            }
        )

        messageList.apply {
            layoutManager = LinearLayoutManager(this@MainActivity).apply {
                stackFromEnd = true  // ‰ªéÂ∫ïÈÉ®ÂºÄÂßãÂ†ÜÂè†
                reverseLayout = false  // ‰∏çË¶ÅÂèçËΩ¨Â∏ÉÂ±Ä
            }
            adapter = messageAdapter
            
            adapter?.registerAdapterDataObserver(object : RecyclerView.AdapterDataObserver() {
                override fun onItemRangeInserted(positionStart: Int, itemCount: Int) {
                    super.onItemRangeInserted(positionStart, itemCount)
                    val layoutManager = layoutManager as LinearLayoutManager
                    val lastVisiblePosition = layoutManager.findLastCompletelyVisibleItemPosition()
                    if (lastVisiblePosition == -1 || positionStart >= messageAdapter.itemCount - 1 && lastVisiblePosition == positionStart - 1) {
                        scrollToPosition(messageAdapter.itemCount - 1)
                    }
                }
            })
        }

        // Ê≥®ÂÜåÂπøÊí≠Êé•Êî∂Âô®
        val filter = IntentFilter("com.example.appchat.REFRESH_AVATAR")
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            registerReceiver(avatarRefreshReceiver, filter, RECEIVER_NOT_EXPORTED)
        } else {
            registerReceiver(avatarRefreshReceiver, filter)
        }
    }

    private fun setupViews() {
        messageList = findViewById(R.id.messageList)
    }

    private fun initWebSocket() {
        val client = OkHttpClient.Builder()
            .readTimeout(0, TimeUnit.MILLISECONDS)
            .build()

        val userId = UserPreferences.getUserId(this)
        val wsUrl = getString(
            R.string.server_ws_url_format,
            getString(R.string.server_ip),
            getString(R.string.server_port)
        )
        val request = Request.Builder()
            .url("$wsUrl?userId=$userId")
            .build()

        webSocket = client.newWebSocket(request, object : WebSocketListener() {
            override fun onMessage(webSocket: WebSocket, text: String) {
                runOnUiThread {
                    try {
                        println("‚≠ê Received WebSocket message: $text")
                        val wsMessage = gson.fromJson(text, WebSocketMessage::class.java)
                        println("üìù Parsed message type: ${wsMessage.type}")
                        when (wsMessage.type) {
                            "history" -> {
                                println("üìú Processing history messages")
                                wsMessage.messages?.forEach { message ->
                                    messageAdapter.addMessage(message)
                                }
                                messageList.scrollToPosition(messageAdapter.itemCount - 1)
                            }
                            "message" -> {
                                wsMessage.message?.let { message ->
                                    println("üí¨ Processing new message: $message")
                                    // Ê£ÄÊü•Ê∂àÊÅØÊòØÂê¶Â±û‰∫éÂΩìÂâçËÅäÂ§©
                                    val shouldAdd = when {
                                        currentChatUserId != null -> {
                                            message.senderId == currentChatUserId || message.receiverId == currentChatUserId
                                        }
                                        currentChatGroupId != null -> {
                                            message.groupId == currentChatGroupId
                                        }
                                        else -> false
                                    }
                                    println("‚úÖ Should add message: $shouldAdd (currentChatUserId=$currentChatUserId, currentChatGroupId=$currentChatGroupId)")
                                    
                                    if (shouldAdd) {
                                        println("‚úÖ Adding new message to local database: ${message.id}")
                                        messageAdapter.addMessage(message)
                                        messageList.scrollToPosition(messageAdapter.itemCount - 1)
                                    } else {
                                        println("‚ö†Ô∏è Message not for current chat, skipping")
                                    }
                                }
                            }
                            "users" -> {
                                wsMessage.users?.let { users ->
                                    println("üë• Processing users message: ${users.map { "${it.username}(${it.isOnline})" }}")
                                    updateUserList(users)
                                }
                            }
                            "userStatus" -> {
                                wsMessage.user?.let { user ->
                                    println("üë§ Processing user status message: ${user.username}(online=${user.isOnline})")
                                    updateUserStatus(user)
                                }
                            }
                            "error" -> {
                                wsMessage.error?.let { error ->
                                    println("‚ùå Received error message: $error")
                                    Toast.makeText(this@MainActivity, error, Toast.LENGTH_SHORT).show()
                                }
                            }
                            /*"pendingFriendRequests" -> {
                                println("ü§ù Processing pending friend requests message")
                                wsMessage.requests?.let { requests ->
                                    println("üì¨ Found ${requests.size} pending requests")
                                    requests.forEach { request: FriendRequest ->
                                        println("üì® Processing request from ${request.sender.username} to ${request.receiver.username}")
                                        Toast.makeText(
                                            this@MainActivity,
                                            "Êî∂Âà∞Êù•Ëá™ ${request.sender.username} ÁöÑÂ•ΩÂèãËØ∑Ê±Ç",
                                            Toast.LENGTH_LONG
                                        ).show()
                                        showFriendRequestDialog(request)
                                    }
                                }
                            }*/
                            "friendRequest" -> {
                                wsMessage.friendRequest?.let { request ->
                                    println("ü§ù Received new friend request from ${request.sender.username}")
                                    Toast.makeText(
                                        this@MainActivity,
                                        "Êî∂Âà∞Êù•Ëá™ ${request.sender.username} ÁöÑÂ•ΩÂèãËØ∑Ê±Ç",
                                        Toast.LENGTH_LONG
                                    ).show()
                                    showFriendRequestDialog(request)
                                }
                            }
                            "friendRequestSent" -> {
                                println("‚úàÔ∏è Friend request sent successfully")
                                Toast.makeText(this@MainActivity, "Â•ΩÂèãËØ∑Ê±ÇÂ∑≤ÂèëÈÄÅ", Toast.LENGTH_SHORT).show()
                            }
                            "friendRequestResult" -> {
                                wsMessage.friendRequest?.let { request ->
                                    println("üì´ Received friend request result: ${request.status} from ${request.receiver.username}")
                                    val message = when (request.status) {
                                        "ACCEPTED" -> "${request.receiver.username} Êé•Âèó‰∫Ü‰Ω†ÁöÑÂ•ΩÂèãËØ∑Ê±Ç"
                                        "REJECTED" -> "${request.receiver.username} ÊãíÁªù‰∫Ü‰Ω†ÁöÑÂ•ΩÂèãËØ∑Ê±Ç"
                                        else -> "Â•ΩÂèãËØ∑Ê±ÇÁä∂ÊÄÅÊõ¥Êñ∞"
                                    }
                                    Toast.makeText(this@MainActivity, message, Toast.LENGTH_SHORT).show()
                                }
                            }
                            "groupCreated" -> {
                                wsMessage.group?.let { group ->
                                    println("üë• New group created: ${group.name}")
                                    Toast.makeText(this@MainActivity, "Áæ§ÁªÑ ${group.name} ÂàõÂª∫ÊàêÂäü", Toast.LENGTH_SHORT).show()
                                    // Á´ãÂç≥ÊòæÁ§∫Áæ§ÁªÑÂàóË°®ÂØπËØùÊ°Ü
                                    showGroupListDialog()
                                }
                            }
                            "groupMessage" -> {
                                wsMessage.message?.let { message ->
                                    println("üë• Received group message for group ${message.groupId}")
                                    if (message.groupId == currentChatGroupId) {
                                        println("‚úÖ Adding group message to current chat")
                                        messageAdapter.addMessage(message)
                                        messageList.scrollToPosition(messageAdapter.itemCount - 1)
                                    } else {
                                        println("‚ö†Ô∏è Group message not for current chat, skipping")
                                    }
                                }
                            }
                        }
                    } catch (e: Exception) {
                        e.printStackTrace()
                        println("‚ùå Error processing WebSocket message: ${e.message}")
                    }
                }
            }

            override fun onFailure(webSocket: WebSocket, t: Throwable, response: okhttp3.Response?) {
                runOnUiThread {
                    Toast.makeText(this@MainActivity, "WebSocketÈîôËØØ: ${t.message}", Toast.LENGTH_SHORT).show()
                }
            }
        })
    }

    private fun updateUserList(users: List<UserDTO>) {
        println("Received users update: ${users.map { "${it.username}(online=${it.isOnline})" }}")
        currentUserAdapter?.updateUsers(users)
    }

    private fun updateUserStatus(user: UserDTO) {
        println("Processing user status message: ${user.username}(online=${user.isOnline})")
        currentUserAdapter?.updateUserStatus(user)
    }

    private fun showContactsDialog() {
        updateToolbarTitle("ËÅîÁ≥ª‰∫∫")
        val dialog = AlertDialog.Builder(this)
            .setTitle("ËÅîÁ≥ª‰∫∫")
            .create()

        val view = layoutInflater.inflate(R.layout.dialog_contacts, null)
        val contactsList = view.findViewById<RecyclerView>(R.id.contactsList)
        contactsList.layoutManager = LinearLayoutManager(this)

        val adapter = ContactAdapter { contact ->
            dialog.dismiss()
            startPrivateChat(contact.id)
        }
        contactsList.adapter = adapter

        // Âä†ËΩΩËÅîÁ≥ª‰∫∫ÂàóË°®
        apiService.getUserContacts(UserPreferences.getUserId(this))
            .enqueue(object : Callback<List<UserDTO>> {
                override fun onResponse(call: Call<List<UserDTO>>, response: Response<List<UserDTO>>) {
                    if (response.isSuccessful) {
                        response.body()?.let { users ->
                            adapter.updateContacts(users)
                        }
                    }
                }

                override fun onFailure(call: Call<List<UserDTO>>, t: Throwable) {
                    Toast.makeText(this@MainActivity, "Âä†ËΩΩËÅîÁ≥ª‰∫∫Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                }
            })

        dialog.setView(view)
        dialog.show()
    }

    private fun showSearchDialog() {
        val dialog = AlertDialog.Builder(this)
            .setTitle("ÊêúÁ¥¢Áî®Êà∑")
            .create()

        val view = layoutInflater.inflate(R.layout.dialog_search_user, null)
        val searchInput = view.findViewById<EditText>(R.id.searchInput)
        val searchResults = view.findViewById<RecyclerView>(R.id.searchResults)
        val progressBar = view.findViewById<ProgressBar>(R.id.progressBar)
        val searchButton = view.findViewById<Button>(R.id.searchButton)

        val adapter = SearchUserAdapter(emptyList()) { user ->
            println("User selected: ${user.username}")
            webSocket.sendDebug(mapOf(
                "type" to "FRIEND_REQUEST",
                "senderId" to UserPreferences.getUserId(this),
                "receiverId" to user.id
            ))
            Toast.makeText(this, "Â∑≤ÂèëÈÄÅÂ•ΩÂèãËØ∑Ê±Ç", Toast.LENGTH_SHORT).show()
        }

        searchResults.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
            this.adapter = adapter
        }

        val performSearch = { keyword: String ->
            if (keyword.isNotEmpty()) {
                println("Performing search with keyword: $keyword")
                progressBar.visibility = View.VISIBLE
                adapter.updateContacts(emptyList()) // Ê∏ÖÁ©∫‰πãÂâçÁöÑÁªìÊûú
                apiService.searchUsers(keyword)
                    .enqueue(object : Callback<List<UserDTO>> {
                        override fun onResponse(call: Call<List<UserDTO>>, response: Response<List<UserDTO>>) {
                            progressBar.visibility = View.GONE
                            if (response.isSuccessful) {
                                response.body()?.let { users ->
                                    adapter.updateContacts(users)
                                }
                            } else {
                                Toast.makeText(this@MainActivity, "ÊêúÁ¥¢Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                            }
                        }

                        override fun onFailure(call: Call<List<UserDTO>>, t: Throwable) {
                            progressBar.visibility = View.GONE
                            Toast.makeText(this@MainActivity, "ÁΩëÁªúÈîôËØØ", Toast.LENGTH_SHORT).show()
                        }
                    })
            }
        }

        searchInput.setOnEditorActionListener { _, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                performSearch(searchInput.text.toString())
                true
            } else {
                false
            }
        }

        searchButton.setOnClickListener {
            performSearch(searchInput.text.toString())
        }

        dialog.setView(view)
        dialog.show()
    }

    private fun logout() {
        UserPreferences.clear(this)
        webSocket.close(1000, "User logged out")
        startActivity(Intent(this, LoginActivity::class.java))
        finish()
    }

    private fun showFriendRequestDialog(request: FriendRequest) {
        println("Showing friend request dialog for: ${request.sender.username}")
        AlertDialog.Builder(this)
            .setTitle("Â•ΩÂèãËØ∑Ê±Ç")
            .setMessage("${request.sender.username} ÊÉ≥Ê∑ªÂä†‰Ω†‰∏∫Â•ΩÂèã")
            .setPositiveButton("Êé•Âèó") { _, _ ->
                webSocket.sendDebug(mapOf(
                    "type" to "HANDLE_FRIEND_REQUEST",
                    "requestId" to request.id,
                    "accept" to true
                ))
            }
            .setNegativeButton("ÊãíÁªù") { _, _ ->
                webSocket.sendDebug(mapOf(
                    "type" to "HANDLE_FRIEND_REQUEST",
                    "requestId" to request.id,
                    "accept" to false
                ))
            }
            .show()
    }

    private fun showCreateGroupDialog() {
        val dialog = AlertDialog.Builder(this)
            .setTitle("ÂàõÂª∫Áæ§ËÅä")
            .create()

        val view = layoutInflater.inflate(R.layout.dialog_create_group, null)
        val groupNameInput = view.findViewById<EditText>(R.id.groupNameInput)
        val contactsList = view.findViewById<RecyclerView>(R.id.contactsList)
        val createButton = view.findViewById<Button>(R.id.createButton)

        val adapter = ContactSelectionAdapter(
            contacts = emptyList(),
            onContactClick = { selectedUser: UserDTO -> 
                // Â§ÑÁêÜÁî®Êà∑ÈÄâÊã©
            }
        )

        contactsList.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
            this.adapter = adapter
        }

        // Âä†ËΩΩËÅîÁ≥ª‰∫∫ÂàóË°®
        ApiClient.apiService.getUserContacts(UserPreferences.getUserId(this))
            .enqueue(object : Callback<List<UserDTO>> {
                override fun onResponse(call: Call<List<UserDTO>>, response: Response<List<UserDTO>>) {
                    if (response.isSuccessful) {
                        response.body()?.let { contacts ->
                            adapter.updateContacts(contacts)
                        }
                    }
                }

                override fun onFailure(call: Call<List<UserDTO>>, t: Throwable) {
                    Toast.makeText(this@MainActivity, "Âä†ËΩΩËÅîÁ≥ª‰∫∫Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                }
            })

        createButton.setOnClickListener {
            val groupName = groupNameInput.text.toString()
            if (groupName.isBlank()) {
                Toast.makeText(this, "ËØ∑ËæìÂÖ•Áæ§ÁªÑÂêçÁß∞", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            val selectedContacts = adapter.getSelectedContacts()
            if (selectedContacts.isEmpty()) {
                Toast.makeText(this, "ËØ∑ÈÄâÊã©Áæ§ÁªÑÊàêÂëò", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            val request = CreateGroupRequest(
                name = groupName,
                creatorId = UserPreferences.getUserId(this),
                memberIds = selectedContacts.map { it.id }
            )

            ApiClient.apiService.createGroup(request)
                .enqueue(object : Callback<Group> {
                    override fun onResponse(call: Call<Group>, response: Response<Group>) {
                        if (response.isSuccessful) {
                            response.body()?.let { group ->
                                updateToolbarTitle(group.name)
                                Toast.makeText(this@MainActivity, "Áæ§ÁªÑÂàõÂª∫ÊàêÂäü", Toast.LENGTH_SHORT).show()
                            }
                            dialog.dismiss()
                        } else {
                            Toast.makeText(this@MainActivity, "Áæ§ÁªÑÂàõÂª∫Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                        }
                    }

                    override fun onFailure(call: Call<Group>, t: Throwable) {
                        Toast.makeText(this@MainActivity, "ÁΩëÁªúÈîôËØØ", Toast.LENGTH_SHORT).show()
                    }
                })
        }

        dialog.setView(view)
        dialog.show()
    }

    private fun showGroupListDialog() {
        updateToolbarTitle("Áæ§ËÅä")
        val dialog = AlertDialog.Builder(this)
            .setTitle("Áæ§ÁªÑ")
            .setView(R.layout.dialog_group_list)
            .create()

        dialog.show()

        val groupsList = dialog.findViewById<RecyclerView>(R.id.groupsList)
        val createGroupButton = dialog.findViewById<Button>(R.id.createGroupButton)

        createGroupButton?.setOnClickListener {
            showCreateGroupDialog()
            dialog.dismiss()
        }

        val adapter = GroupAdapter { group ->
            currentChatGroupId = group.id
            currentChatUserId = null
            title = group.name
            messageAdapter = MessageAdapter(
                context = this,
                currentUserId = UserPreferences.getUserId(this),
                currentChatType = "group",
                chatPartnerId = group.id,
                onMessageDelete = { messageId ->
                    lifecycleScope.launch {
                        try {
                            println("üóëÔ∏è Starting message deletion process: $messageId")
                            
                            // ÂÖà‰ªéÊú¨Âú∞Âà†Èô§
                            messageAdapter.removeMessage(messageId)
                            println("‚úÖ Local message deletion completed")
                            
                            // ÁÑ∂Âêé‰ªéÊúçÂä°Âô®Âà†Èô§
                            val response = apiService.deleteMessage(messageId, UserPreferences.getUserId(this@MainActivity))
                            if (response.isSuccessful) {
                                println("‚úÖ Server message deletion successful")
                                Toast.makeText(this@MainActivity, "Ê∂àÊÅØÂ∑≤Âà†Èô§", Toast.LENGTH_SHORT).show()
                            } else {
                                println("‚ö†Ô∏è Server deletion failed but local deletion succeeded: ${response.code()}")
                            }
                        } catch (e: Exception) {
                            e.printStackTrace()
                            println("‚ùå Error in deletion process: ${e.message}")
                        }
                    }
                }
            )
            messageList.adapter = messageAdapter
            loadMessages(groupId = group.id)
            dialog.dismiss()
        }

        groupsList?.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
            this.adapter = adapter
        }

        // Âä†ËΩΩÁæ§ÁªÑÂàóË°®
        val userId = UserPreferences.getUserId(this)
        ApiClient.apiService.getUserGroups(userId).enqueue(object : Callback<List<Group>> {
            override fun onResponse(call: Call<List<Group>>, response: Response<List<Group>>) {
                if (response.isSuccessful) {
                    response.body()?.let { groups ->
                        adapter.updateGroups(groups)
                    }
                }
            }

            override fun onFailure(call: Call<List<Group>>, t: Throwable) {
                Toast.makeText(this@MainActivity, "Âä†ËΩΩÁæ§ÁªÑÂ§±Ë¥•", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun sendMessage(content: String) {
        val message = mutableMapOf(
            "type" to "CHAT",
            "senderId" to UserPreferences.getUserId(this),
            "senderName" to UserPreferences.getUsername(this),
            "content" to content,
            "messageType" to "TEXT"
        )

        // Ê†πÊçÆÊòØÁßÅËÅäËøòÊòØÁæ§ËÅäÊ∑ªÂä†‰∏çÂêåÁöÑÂ≠óÊÆµ
        currentChatGroupId?.let { groupId ->
            message["groupId"] = groupId
        }
        currentChatUserId?.let { userId ->
            message["receiverId"] = userId
        }

        webSocket.sendDebug(message)
        messageInput.text.clear()
    }

    private fun showGroupSettingsDialog(group: Group) {
        val dialog = AlertDialog.Builder(this)
            .setTitle("Áæ§ÁªÑËÆæÁΩÆ")
            .create()

        val view = layoutInflater.inflate(R.layout.dialog_group_settings, null)
        val memberList = view.findViewById<RecyclerView>(R.id.memberList)
        val addMemberButton = view.findViewById<Button>(R.id.addMemberButton)

        val adapter = GroupMemberAdapter(
            members = group.members.map { member -> 
                UserDTO(
                    id = member.id,
                    username = member.username,
                    nickname = member.nickname,
                    avatarUrl = member.avatarUrl,
                    isOnline = member.isOnline
                )
            },
            currentUserId = UserPreferences.getUserId(this),
            isCreator = group.creator.id == UserPreferences.getUserId(this)
        ) { user ->
            if (group.creator.id == UserPreferences.getUserId(this)) {
                showRemoveMemberConfirmDialog(group.id, user)
            }
        }

        memberList.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
            this.adapter = adapter
        }

        addMemberButton.setOnClickListener {
            showAddMemberDialog(group)
        }

        dialog.setView(view)
        dialog.show()
    }

    private fun showRemoveMemberConfirmDialog(groupId: Long, user: UserDTO) {
        AlertDialog.Builder(this)
            .setTitle("ÁßªÈô§ÊàêÂëò")
            .setMessage("Á°ÆÂÆöË¶ÅÂ∞Ü ${user.username} ÁßªÂá∫Áæ§ËÅäÂêóÔºü")
            .setPositiveButton("Á°ÆÂÆö") { _, _ ->
                apiService.removeGroupMember(groupId, user.id)
                    .enqueue(object : Callback<Group> {
                        override fun onResponse(call: Call<Group>, response: Response<Group>) {
                            if (response.isSuccessful) {
                                Toast.makeText(this@MainActivity, "Â∑≤ÁßªÈô§ÊàêÂëò", Toast.LENGTH_SHORT).show()
                            } else {
                                Toast.makeText(this@MainActivity, "ÁßªÈô§ÊàêÂëòÂ§±Ë¥•", Toast.LENGTH_SHORT).show()
                            }
                        }

                        override fun onFailure(call: Call<Group>, t: Throwable) {
                            Toast.makeText(this@MainActivity, "ÁΩëÁªúÈîôËØØ", Toast.LENGTH_SHORT).show()
                        }
                    })
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }

    private fun showAddMemberDialog(group: Group) {
        val dialog = AlertDialog.Builder(this)
            .setTitle("Ê∑ªÂä†Áæ§ÊàêÂëò")
            .create()

        val view = layoutInflater.inflate(R.layout.dialog_add_member, null)
        val contactsList = view.findViewById<RecyclerView>(R.id.contactsList)

        // ËøáÊª§ÊéâÂ∑≤ÁªèÂú®Áæ§ÈáåÁöÑËÅîÁ≥ª‰∫∫
        apiService.getUserContacts(UserPreferences.getUserId(this))
            .enqueue(object : Callback<List<UserDTO>> {
                override fun onResponse(call: Call<List<UserDTO>>, response: Response<List<UserDTO>>) {
                    if (response.isSuccessful) {
                        response.body()?.let { contacts ->
                            val availableContacts = contacts.filter { contact ->
                                !group.members.any { it.id == contact.id }
                            }
                            
                            val adapter = ContactSelectionAdapter(availableContacts) { selectedUser ->
                                apiService.addGroupMember(group.id, selectedUser.id)
                                    .enqueue(object : Callback<Group> {
                                        override fun onResponse(call: Call<Group>, response: Response<Group>) {
                                            if (response.isSuccessful) {
                                                Toast.makeText(this@MainActivity, "Â∑≤Ê∑ªÂä†ÊàêÂëò", Toast.LENGTH_SHORT).show()
                                                dialog.dismiss()
                                            } else {
                                                Toast.makeText(this@MainActivity, "Ê∑ªÂä†ÊàêÂëòÂ§±Ë¥•", Toast.LENGTH_SHORT).show()
                                            }
                                        }

                                        override fun onFailure(call: Call<Group>, t: Throwable) {
                                            Toast.makeText(this@MainActivity, "ÁΩëÁªúÈîôËØØ", Toast.LENGTH_SHORT).show()
                                        }
                                    })
                            }

                            contactsList.apply {
                                layoutManager = LinearLayoutManager(this@MainActivity)
                                this.adapter = adapter
                            }
                        }
                    }
                }

                override fun onFailure(call: Call<List<UserDTO>>, t: Throwable) {
                    Toast.makeText(this@MainActivity, "Âä†ËΩΩËÅîÁ≥ª‰∫∫Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                    dialog.dismiss()
                }
            })

        dialog.setView(view)
        dialog.show()
    }

    private fun loadMessages(userId: Long? = null, groupId: Long? = null) {
        // ÂÖà‰ªéÊú¨Âú∞Êï∞ÊçÆÂ∫ìÂä†ËΩΩÊ∂àÊÅØ
        messageAdapter = MessageAdapter(
            context = this,
            currentUserId = UserPreferences.getUserId(this),
            currentChatType = if (userId != null) "private" else "group",
            chatPartnerId = userId ?: groupId ?: -1L,
            onMessageDelete = { messageId ->
                lifecycleScope.launch {
                    try {
                        val response = apiService.deleteMessage(messageId, UserPreferences.getUserId(this@MainActivity))
                        if (response.isSuccessful) {
                            messageAdapter.removeMessage(messageId)
                            Toast.makeText(this@MainActivity, "Ê∂àÊÅØÂ∑≤Âà†Èô§", Toast.LENGTH_SHORT).show()
                        }
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                }
            }
        )

        messageList.adapter = messageAdapter
        val localMessages = messageAdapter.loadLocalMessages()
        println("‚úÖ Loaded ${localMessages.size} messages from local database")

        // ÁÑ∂Âêé‰ªéÊúçÂä°Âô®Ëé∑ÂèñÊúÄÊñ∞Ê∂àÊÅØ
        val currentUserId = UserPreferences.getUserId(this)
        
        when {
            userId != null -> {
                // Âä†ËΩΩÁßÅËÅäÊ∂àÊÅØ
                println("Loading private messages between $currentUserId and $userId")
                apiService.getPrivateMessages(currentUserId, userId)
                    .enqueue(object : Callback<List<ChatMessage>> {
                        override fun onResponse(call: Call<List<ChatMessage>>, response: Response<List<ChatMessage>>) {
                            if (response.isSuccessful) {
                                response.body()?.let { messages ->
                                    println("‚úÖ Received ${messages.size} messages from server")
                                    messageAdapter.updateMessages(messages)
                                }
                            }
                        }

                        override fun onFailure(call: Call<List<ChatMessage>>, t: Throwable) {
                            println("‚ùå Network error: ${t.message}")
                        }
                    })
            }
            groupId != null -> {
                // Âä†ËΩΩÁæ§ËÅäÊ∂àÊÅØ
                apiService.getGroupMessages(groupId)
                    .enqueue(object : Callback<List<ChatMessage>> {
                        override fun onResponse(call: Call<List<ChatMessage>>, response: Response<List<ChatMessage>>) {
                            if (response.isSuccessful) {
                                response.body()?.let { messages ->
                                    println("‚úÖ Received ${messages.size} messages from server")
                                    messageAdapter.updateMessages(messages)
                                }
                            }
                        }

                        override fun onFailure(call: Call<List<ChatMessage>>, t: Throwable) {
                            println("‚ùå Network error: ${t.message}")
                        }
                    })
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        // ÂèñÊ∂àÊ≥®ÂÜåÂπøÊí≠Êé•Êî∂Âô®
        unregisterReceiver(avatarRefreshReceiver)
        webSocket.close(1000, "Activity destroyed")
    }

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.main_menu, menu)
        return true
    }

    override fun onPrepareOptionsMenu(menu: Menu): Boolean {
        // Âú®Â§öÈÄâÊ®°Âºè‰∏ãÊòæÁ§∫Âà†Èô§ÊåâÈíÆÔºåÈöêËóèÂÖ∂‰ªñÊåâÈíÆ
        menu.findItem(R.id.action_search)?.isVisible = !isMultiSelectMode
        menu.findItem(R.id.action_more)?.isVisible = !isMultiSelectMode
        menu.findItem(R.id.action_clear_chat)?.apply {
            isVisible = isMultiSelectMode
            setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS)  // Âú®Â∑•ÂÖ∑Ê†è‰∏äÁõ¥Êé•ÊòæÁ§∫
            setIcon(R.drawable.ic_delete)  // ËÆæÁΩÆÂà†Èô§ÂõæÊ†á
        }
        return super.onPrepareOptionsMenu(menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            // ÊêúÁ¥¢Áõ∏ÂÖ≥
            R.id.action_search_messages -> {
                showSearchMessagesDialog()
                true
            }
            R.id.action_search_users -> {
                showSearchUsersDialog()
                true
            }

            // Êõ¥Â§öËèúÂçïÈ°π
            R.id.menu_profile -> {
                showProfileDialog()
                true
            }
            R.id.menu_group_chat -> {
                showCreateGroupDialog()
                true
            }
            R.id.menu_contacts -> {
                showContactsDialog()
                true
            }
            R.id.action_clear_chat -> {
                showDeleteMessagesDialog()
                true
            }
            R.id.action_logout -> {
                showLogoutConfirmDialog()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun showLogoutConfirmDialog() {
        AlertDialog.Builder(this)
            .setTitle("ÈÄÄÂá∫ÁôªÂΩï")
            .setMessage("Á°ÆÂÆöË¶ÅÈÄÄÂá∫ÁôªÂΩïÂêóÔºü")
            .setPositiveButton("Á°ÆÂÆö") { _, _ ->
                logout()
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }

    fun updateToolbarTitle(title: String) {
        findViewById<TextView>(R.id.toolbarTitle).text = title
    }

    private fun showFileChooser() {
        println("Showing file chooser")
        if (checkStoragePermission()) {
            println("Storage permission granted")
            filePickerLauncher.launch("*/*")
        } else {
            println("Requesting storage permission")
            requestStoragePermission()
        }
    }

    private fun checkStoragePermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            // Android 13 Âèä‰ª•‰∏äÁâàÊú¨
            ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.READ_MEDIA_IMAGES
            ) == PackageManager.PERMISSION_GRANTED &&
            ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.READ_MEDIA_VIDEO
            ) == PackageManager.PERMISSION_GRANTED &&
            ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.READ_MEDIA_AUDIO
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            // Android 12 Âèä‰ª•‰∏ãÁâàÊú¨
            ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.READ_EXTERNAL_STORAGE
            ) == PackageManager.PERMISSION_GRANTED
        }
    }

    private fun requestStoragePermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            requestPermissionLauncher.launch(arrayOf(
                Manifest.permission.READ_MEDIA_IMAGES,
                Manifest.permission.READ_MEDIA_VIDEO,
                Manifest.permission.READ_MEDIA_AUDIO
            ))
        } else {
            requestPermissionLauncher.launch(arrayOf(
                Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
            ))
        }
    }

    private fun sendFileMessage(fileDTO: FileDTO) {
        try {
            println("‚≠ê Preparing to send file message: ${fileDTO.filename}")
            
            val message = mutableMapOf<String, Any>(
                "type" to "CHAT",
                "senderId" to UserPreferences.getUserId(this),
                "senderName" to UserPreferences.getUsername(this),
                "content" to fileDTO.filename,
                "messageType" to "FILE",
                "fileUrl" to "${getString(R.string.server_url_format).format(
                    getString(R.string.server_ip),
                    getString(R.string.server_port)
                )}${fileDTO.url}"
            )

            // Ê∑ªÂä†Êé•Êî∂ËÄÖÊàñÁæ§ÁªÑID
            currentChatGroupId?.let { groupId ->
                message["groupId"] = groupId.toLong()
                println("‚úÖ Adding groupId: $groupId")
            } ?: currentChatUserId?.let { userId ->
                message["receiverId"] = userId.toLong()
                println("‚úÖ Adding receiverId: $userId")
            } ?: run {
                println("‚ùå No chat target specified")
                return
            }
            
            println("‚úÖ Sending file message: $message")
            webSocket.send(gson.toJson(message))
        } catch (e: Exception) {
            e.printStackTrace()
            println("‚ùå Failed to send file message: ${e.message}")
            Toast.makeText(this, "ÂèëÈÄÅÂ§±Ë¥•", Toast.LENGTH_SHORT).show()
        }
    }

    private fun uploadFile(uri: Uri) {
        println("‚≠ê Starting file upload")
        val contentResolver = applicationContext.contentResolver
        val filename = getFileName(contentResolver, uri)
        println("‚úÖ File name: $filename")
        val inputStream = contentResolver.openInputStream(uri)
        val file = inputStream?.let { createTempFile(it, filename) }
        
        if (file != null) {
            try {
                val mediaType = contentResolver.getType(uri)?.toMediaTypeOrNull()
                val requestFile = file.asRequestBody(mediaType)
                val body = MultipartBody.Part.createFormData("file", filename, requestFile)
                val userId = UserPreferences.getUserId(this)
                
                println("‚úÖ Uploading file: $filename")
                ApiClient.apiService.uploadFile(body).enqueue(object : Callback<FileDTO> {
                    override fun onResponse(call: Call<FileDTO>, response: Response<FileDTO>) {
                        if (response.isSuccessful) {
                            response.body()?.let { fileDTO ->
                                println("‚úÖ File uploaded successfully: ${fileDTO.url}")
                                sendFileMessage(fileDTO)
                            }
                        } else {
                            println("‚ùå Upload failed: ${response.code()}")
                            Toast.makeText(this@MainActivity, "Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                        }
                    }
                    
                    override fun onFailure(call: Call<FileDTO>, t: Throwable) {
                        println("‚ùå Network error: ${t.message}")
                        Toast.makeText(this@MainActivity, "ÁΩëÁªúÈîôËØØ", Toast.LENGTH_SHORT).show()
                    }
                })
            } catch (e: Exception) {
                e.printStackTrace()
                println("‚ùå Error preparing file upload: ${e.message}")
                Toast.makeText(this, "Êñá‰ª∂Â§ÑÁêÜÂ§±Ë¥•", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun getFileName(contentResolver: ContentResolver, uri: Uri): String {
        val displayName: String? = when (uri.scheme) {
            "content" -> {
                val cursor = contentResolver.query(uri, null, null, null, null)
                cursor?.use {
                    if (it.moveToFirst()) {
                        val displayNameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)
                        if (displayNameIndex >= 0) {
                            it.getString(displayNameIndex)
                        } else null
                    } else null
                }
            }
            "file" -> uri.lastPathSegment
            else -> null
        }
        return displayName ?: "file"
    }

    private fun createTempFile(inputStream: InputStream, filename: String): File? {
        return try {
            val tempDir = cacheDir
            val tempFile = File.createTempFile(filename, null, tempDir)
            tempFile.outputStream().use { outputStream ->
                inputStream.copyTo(outputStream)
            }
            tempFile
        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }

    private fun showSearchMessagesDialog() {
        val dialog = AlertDialog.Builder(this)
            .setTitle("ÊêúÁ¥¢ËÅäÂ§©ËÆ∞ÂΩï")
            .create()

        val view = layoutInflater.inflate(R.layout.dialog_search_messages, null)
        val searchInput = view.findViewById<EditText>(R.id.searchInput)
        val resultsList = view.findViewById<RecyclerView>(R.id.searchResults)
        resultsList.layoutManager = LinearLayoutManager(this)

        searchInput.setOnEditorActionListener { _, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                val query = searchInput.text.toString()
                searchMessages(query, resultsList) { position ->
                    dialog.dismiss()
                    messageList.scrollToPosition(position)
                    messageAdapter.highlightMessage(position)
                }
                true
            } else {
                false
            }
        }

        dialog.setView(view)
        dialog.show()
    }

    private fun searchMessages(query: String, resultsList: RecyclerView, onItemClick: (Int) -> Unit) {
        // Âú®ÂΩìÂâçÊ∂àÊÅØÂàóË°®‰∏≠ÊêúÁ¥¢
        val searchResults = messageAdapter.searchMessages(query)
        
        // ÂàõÂª∫ÊêúÁ¥¢ÁªìÊûúÈÄÇÈÖçÂô®
        val adapter = SearchResultAdapter(searchResults, onItemClick)
        
        resultsList.adapter = adapter
    }

    private fun showProfileDialog() {
        val dialog = AlertDialog.Builder(this)
            .setTitle("‰∏™‰∫∫ËµÑÊñô")
            .create()

        val view = layoutInflater.inflate(R.layout.dialog_profile, null)
        val avatarImage = view.findViewById<ImageView>(R.id.avatarImage)
        val nicknameInput = view.findViewById<EditText>(R.id.nicknameInput)
        val saveButton = view.findViewById<Button>(R.id.saveButton)

        // Âä†ËΩΩÂΩìÂâçÂ§¥ÂÉèÂíåÊòµÁß∞
        loadCurrentUserProfile(avatarImage, nicknameInput)

        // ÁÇπÂáªÂ§¥ÂÉèÊõ¥Êç¢
        avatarImage.setOnClickListener {
            avatarPickerLauncher.launch("image/*")
        }

        // ‰øùÂ≠òÊåâÈíÆ
        saveButton.setOnClickListener {
            val newNickname = nicknameInput.text.toString()
            updateUserProfile(newNickname)
            dialog.dismiss()
        }

        // Âú®Â§¥ÂÉèÊõ¥Êñ∞ÊàêÂäüÂêéÔºå‰πüÊõ¥Êñ∞Âè≥‰∏äËßíÁöÑÂ§¥ÂÉè
        val toolbarAvatar = findViewById<ImageView>(R.id.toolbarAvatar)
        val userId = UserPreferences.getUserId(this)
        val avatarUrl = "${getString(R.string.server_url_format).format(
            getString(R.string.server_ip),
            getString(R.string.server_port)
        )}/api/users/$userId/avatar?t=${System.currentTimeMillis()}"
        
        Glide.with(this)
            .load(avatarUrl)
            .apply(RequestOptions.circleCropTransform())
            .skipMemoryCache(true)
            .diskCacheStrategy(DiskCacheStrategy.NONE)
            .placeholder(R.drawable.default_avatar)
            .error(R.drawable.default_avatar)
            .into(toolbarAvatar)

        dialog.setView(view)
        dialog.show()
    }

    private fun updateUserProfile(nickname: String) {
        val userId = UserPreferences.getUserId(this)
        val request = UpdateUserRequest(nickname = nickname)
        
        apiService.updateUser(userId, request).enqueue(object : Callback<UserDTO> {
            override fun onResponse(call: Call<UserDTO>, response: Response<UserDTO>) {
                if (response.isSuccessful) {
                    Toast.makeText(this@MainActivity, "‰∏™‰∫∫ËµÑÊñôÊõ¥Êñ∞ÊàêÂäü", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this@MainActivity, "Êõ¥Êñ∞Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<UserDTO>, t: Throwable) {
                Toast.makeText(this@MainActivity, "ÁΩëÁªúÈîôËØØ", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun showDeleteMessagesDialog() {
        val selectedMessages = messageAdapter.getSelectedMessages()
        if (selectedMessages.isEmpty()) {
            Toast.makeText(this, "ËØ∑ÈÄâÊã©Ë¶ÅÂà†Èô§ÁöÑÊ∂àÊÅØ", Toast.LENGTH_SHORT).show()
            return
        }

        AlertDialog.Builder(this)
            .setTitle("Âà†Èô§Ê∂àÊÅØ")
            .setMessage("Á°ÆÂÆöË¶ÅÂà†Èô§ÈÄâ‰∏≠ÁöÑ ${selectedMessages.size} Êù°Ê∂àÊÅØÂêóÔºü")
            .setPositiveButton("Á°ÆÂÆö") { _, _ ->
                deleteSelectedMessages()
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }

    private fun deleteSelectedMessages() {
        lifecycleScope.launch {
            try {
                messageAdapter.getSelectedMessages().forEach { messageId ->
                    val response = apiService.deleteMessage(
                        messageId, 
                        UserPreferences.getUserId(this@MainActivity)
                    )
                    if (response.isSuccessful) {
                        response.body()?.let { deleteResponse ->
                            if (deleteResponse.isFullyDeleted) {
                                messageAdapter.removeMessageCompletely(messageId)
                            } else {
                                messageAdapter.removeMessage(messageId)
                            }
                        }
                    }
                }
                exitMultiSelectMode()
                Toast.makeText(this@MainActivity, "Âà†Èô§ÊàêÂäü", Toast.LENGTH_SHORT).show()
            } catch (e: Exception) {
                Toast.makeText(this@MainActivity, "Âà†Èô§Â§±Ë¥•", Toast.LENGTH_SHORT).show()
            }
        }
    }

    fun enterMultiSelectMode() {
        isMultiSelectMode = true
        messageAdapter.setMultiSelectMode(true)
        updateToolbarTitle("Â∑≤ÈÄâÊã© 0 Êù°Ê∂àÊÅØ")
        invalidateOptionsMenu()
    }

    private fun exitMultiSelectMode() {
        isMultiSelectMode = false
        selectedMessages.clear()
        messageAdapter.setMultiSelectMode(false)
        updateToolbarTitle(getCurrentChatTitle())
        invalidateOptionsMenu()
    }

    private fun getCurrentChatTitle(): String {
        return when {
            currentChatUserId != null -> "ÁßÅËÅä"
            currentChatGroupId != null -> "Áæ§ËÅä"
            else -> "ËÅäÂ§©"
        }
    }

    private fun loadCurrentUserProfile(avatarImage: ImageView, nicknameInput: EditText) {
        val userId = UserPreferences.getUserId(this)
        
        // Âä†ËΩΩÂ§¥ÂÉè
        val avatarUrl = "${getString(R.string.server_url_format).format(
            getString(R.string.server_ip),
            getString(R.string.server_port)
        )}/api/users/$userId/avatar"
        
        Glide.with(this)
            .load(avatarUrl)
            .apply(RequestOptions.circleCropTransform())
            .placeholder(R.drawable.default_avatar)
            .error(R.drawable.default_avatar)
            .into(avatarImage)

        // Âä†ËΩΩÁî®Êà∑‰ø°ÊÅØ
        apiService.getUser(userId).enqueue(object : Callback<UserDTO> {
            override fun onResponse(call: Call<UserDTO>, response: Response<UserDTO>) {
                if (response.isSuccessful) {
                    response.body()?.let { user ->
                        nicknameInput.setText(user.nickname)
                    }
                }
            }

            override fun onFailure(call: Call<UserDTO>, t: Throwable) {
                Toast.makeText(this@MainActivity, "Âä†ËΩΩÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun sendFriendRequest(receiverId: Long) {
        webSocket.sendDebug(mapOf(
            "type" to "FRIEND_REQUEST",
            "senderId" to UserPreferences.getUserId(this),
            "receiverId" to receiverId
        ))
    }
    private fun showSearchUsersDialog() {
        val dialog = AlertDialog.Builder(this)
            .setTitle("ÊêúÁ¥¢Áî®Êà∑")
            .create()

        val view = layoutInflater.inflate(R.layout.dialog_search_users, null)
        val searchInput = view.findViewById<EditText>(R.id.searchInput)
        val resultsList = view.findViewById<RecyclerView>(R.id.searchResults)
        resultsList.layoutManager = LinearLayoutManager(this)

        searchInput.setOnEditorActionListener { _, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                val query = searchInput.text.toString()
                apiService.searchUsers(query).enqueue(object : Callback<List<UserDTO>> {
                    override fun onResponse(call: Call<List<UserDTO>>, response: Response<List<UserDTO>>) {
                        if (response.isSuccessful) {
                            response.body()?.let { users ->
                                val adapter = SearchUserAdapter(users) { user ->
                                    AlertDialog.Builder(this@MainActivity)
                                        .setTitle("Ê∑ªÂä†Â•ΩÂèã")
                                        .setMessage("Á°ÆÂÆöË¶ÅÊ∑ªÂä† ${user.nickname ?: user.username} ‰∏∫Â•ΩÂèãÂêóÔºü")
                                        .setPositiveButton("Á°ÆÂÆö") { _, _ ->
                                            sendFriendRequest(user.id)
                                            Toast.makeText(this@MainActivity, "Â∑≤ÂèëÈÄÅÂ•ΩÂèãËØ∑Ê±Ç", Toast.LENGTH_SHORT).show()
                                            dialog.dismiss()
                                        }
                                        .setNegativeButton("ÂèñÊ∂à", null)
                                        .show()
                                }
                                resultsList.adapter = adapter
                            }
                        }
                    }

                    override fun onFailure(call: Call<List<UserDTO>>, t: Throwable) {
                        Toast.makeText(this@MainActivity, "ÊêúÁ¥¢Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                    }
                })
                true
            } else {
                false
            }
        }

        dialog.setView(view)
        dialog.show()
    }

    fun startPrivateChat(userId: Long) {
        currentChatUserId = userId
        currentChatGroupId = null
        
        // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂπ∂Êõ¥Êñ∞Ê†áÈ¢ò
        apiService.getUser(userId).enqueue(object : Callback<UserDTO> {
            override fun onResponse(call: Call<UserDTO>, response: Response<UserDTO>) {
                if (response.isSuccessful) {
                    response.body()?.let { user ->
                        updateToolbarTitle("‰∏é ${user.nickname ?: user.username} ËÅäÂ§©‰∏≠")
                    }
                }
            }
            override fun onFailure(call: Call<UserDTO>, t: Throwable) {
                updateToolbarTitle("ÁßÅËÅä")
            }
        })
        
        loadMessages(userId = userId)
    }

    private fun uploadAvatar(uri: Uri) {
        val contentResolver = applicationContext.contentResolver
        val inputStream = contentResolver.openInputStream(uri)
        val file = inputStream?.let { createTempFile(it, "avatar_temp") }

        if (file != null) {
            val mediaType = contentResolver.getType(uri)?.toMediaTypeOrNull()
            val requestFile = file.asRequestBody(mediaType)
            val body = MultipartBody.Part.createFormData("avatar", "avatar.jpg", requestFile)

            val userId = UserPreferences.getUserId(this)
            apiService.uploadAvatar(userId, body).enqueue(object : Callback<UserDTO> {
                override fun onResponse(call: Call<UserDTO>, response: Response<UserDTO>) {
                    if (response.isSuccessful) {
                        // Ê∏ÖÈô§ÁºìÂ≠òÂπ∂Âº∫Âà∂‰ªéÊúçÂä°Âô®Ëé∑ÂèñÊñ∞Â§¥ÂÉè
                        Glide.get(this@MainActivity).clearMemory()
                        Thread {
                            Glide.get(this@MainActivity).clearDiskCache()
                        }.start()
                        
                        Handler(Looper.getMainLooper()).post {
                            val avatarUrl = "${getString(R.string.server_url_format).format(
                                getString(R.string.server_ip),
                                getString(R.string.server_port)
                            )}/api/users/$userId/avatar?t=${System.currentTimeMillis()}"
                            
                            val toolbarAvatar = findViewById<ImageView>(R.id.toolbarAvatar)
                            Glide.with(this@MainActivity)
                                .load(avatarUrl)
                                .apply(RequestOptions.circleCropTransform())
                                .skipMemoryCache(true)
                                .diskCacheStrategy(DiskCacheStrategy.NONE)
                                .placeholder(R.drawable.default_avatar)
                                .error(R.drawable.default_avatar)
                                .into(toolbarAvatar)
                            
                            Toast.makeText(this@MainActivity, "Â§¥ÂÉèÊõ¥Êñ∞ÊàêÂäü", Toast.LENGTH_SHORT).show()
                        }
                    } else {
                        Toast.makeText(this@MainActivity, "Â§¥ÂÉèÊõ¥Êñ∞Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                    }
                }

                override fun onFailure(call: Call<UserDTO>, t: Throwable) {
                    Toast.makeText(this@MainActivity, "ÁΩëÁªúÈîôËØØ", Toast.LENGTH_SHORT).show()
                }
            })
        }
    }

    fun updateSelectedCount(count: Int) {
        if (isMultiSelectMode) {
            updateToolbarTitle("Â∑≤ÈÄâÊã© $count Êù°Ê∂àÊÅØ")
            if (count == 0) {
                exitMultiSelectMode()
            }
        }
    }

    // Ê∑ªÂä†ËøîÂõûÈîÆÂ§ÑÁêÜ
    override fun onBackPressed() {
        if (isMultiSelectMode) {
            exitMultiSelectMode()
        } else {
            super.onBackPressed()
        }
    }

    fun showMultiSelectActionBar() {
        // ÊòæÁ§∫Â§öÈÄâÊ®°ÂºèÁöÑÂ∑•ÂÖ∑Ê†è
        supportActionBar?.apply {
            setDisplayHomeAsUpEnabled(true)
            title = "ÈÄâÊã©Ë¶ÅÂà†Èô§ÁöÑÊ∂àÊÅØ"
        }
        
        // ÈöêËóèÊôÆÈÄöÂ∑•ÂÖ∑Ê†èÂÜÖÂÆπÔºåÊòæÁ§∫Âà†Èô§ÊåâÈíÆ
        findViewById<LinearLayout>(R.id.toolbarContent).visibility = View.GONE
        deleteButton.visibility = View.VISIBLE
    }

    fun hideMultiSelectActionBar() {
        // ÈöêËóèÂ§öÈÄâÊ®°ÂºèÁöÑÂ∑•ÂÖ∑Ê†è
        supportActionBar?.apply {
            setDisplayHomeAsUpEnabled(false)
            title = "ËÅäÂ§©"
        }
        
        // ÊòæÁ§∫ÊôÆÈÄöÂ∑•ÂÖ∑Ê†èÂÜÖÂÆπÔºåÈöêËóèÂà†Èô§ÊåâÈíÆ
        findViewById<LinearLayout>(R.id.toolbarContent).visibility = View.VISIBLE
        deleteButton.visibility = View.GONE
    }

    fun showDeleteButton(callback: () -> Unit) {
        deleteButton.visibility = View.VISIBLE
        deleteCallback = callback
        deleteButton.setOnClickListener {
            deleteCallback?.invoke()
        }
    }

    companion object {
        private const val FILE_PICK_REQUEST = 1
        private const val STORAGE_PERMISSION_REQUEST = 2
    }
}